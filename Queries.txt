-- Not to be run as a SQL script

drop table IF EXISTS retail_atomic;

drop table IF EXISTS retail_audit;

CREATE TABLE retail_atomic(
id SERIAL PRIMARY KEY,
InvoiceNo VARCHAR(6), StockCode VARCHAR(5),
Description VARCHAR(150), Quantity INTEGER,
InvoiceDate TIMESTAMP, UnitPrice NUMERIC(10,4),
CustomerID VARCHAR(6), Country VARCHAR(30));


CREATE TABLE retail_audit(
id SERIAL PRIMARY KEY,
InvoiceNo VARCHAR(20), StockCode VARCHAR(20),
Description VARCHAR(150), Quantity INTEGER,
InvoiceDate TIMESTAMP, UnitPrice NUMERIC(10,4),
CustomerID VARCHAR(20), Country VARCHAR(30));

drop table  IF EXISTS retail_agg;

drop table  IF EXISTS retail_agg_temp;

CREATE TABLE retail_agg(
"CustomerID" VARCHAR(5), "StockCode" VARCHAR(5),
"Country" Varchar(30),
"QuantitySum" INTEGER,
CONSTRAINT aggkey PRIMARY KEY("CustomerID","StockCode","Country"));


CREATE TABLE retail_agg_temp(
"CustomerID" VARCHAR(5), "StockCode" VARCHAR(5),
"Country" Varchar(30),
"QuantitySum" INTEGER,
CONSTRAINT aggtempkey PRIMARY KEY("CustomerID","StockCode","Country"));


drop table  IF EXISTS stock_info;

CREATE TABLE stock_info(
"StockCode" VARCHAR(5), 
"Description" VARCHAR(150),
"UnitPrice" NUMERIC(10,3), "Instances" INTEGER,
CONSTRAINT stockkey PRIMARY KEY("StockCode"));

drop table  IF EXISTS stock_temp;

CREATE TABLE stock_temp(
"StockCode" VARCHAR(5), 
"Description" VARCHAR(150),
"UnitPrice" NUMERIC(10,3), "Instances" INTEGER,
CONSTRAINT tempstockkey PRIMARY KEY("StockCode"));


-- Update and Insert(upsert) query

INSERT INTO retail_agg as ra ("CustomerID", "StockCode", "Country", "QuantitySum")
    SELECT t."CustomerID", t."StockCode", t."Country", t."QuantitySum"
        FROM retail_agg as r
        RIGHT JOIN retail_agg_temp as t 
        ON t."CustomerID"=r."CustomerID" AND t."StockCode"=r."StockCode" AND t."Country"=r."Country" 
ON CONFLICT ON CONSTRAINT aggkey
DO UPDATE SET  
    "QuantitySum" = ra."QuantitySum"+EXCLUDED."QuantitySum";




INSERT INTO stock_info as si ("StockCode","Description","UnitPrice","Instances")
    SELECT t."StockCode", t."Description", t."UnitPrice", t."Instances"
    FROM stock_info as s
    RIGHT JOIN stock_temp as t
    ON t."StockCode"=s."StockCode"
ON CONFLICT ON CONSTRAINT stockkey DO UPDATE SET
    "UnitPrice"= (si."UnitPrice"*si."Instances" + EXCLUDED."UnitPrice" * EXCLUDED."Instances")/ (si."Instances" + EXCLUDED."Instances"),
    "Instances"= si."Instances" + EXCLUDED."Instances",
    "Description"= CASE 
                   WHEN char_length(si."Description")>=char_length(EXCLUDED."Description") THEN si."Description"
                   ELSE EXCLUDED."Description" END;


-- Query for export of aggregate
SELECT a."CustomerID", a."StockCode", s."Description", a."Country", s."UnitPrice", a."QuantitySum" 
FROM retail_agg a INNER JOIN stock_info s ON a."StockCode"=s."StockCode";



--- Enquiry queries


select count(*) from retail_agg;
select count(*) from retail_agg_temp;
select count(*) from retail_atomic;
select count(*) from retail_audit;

truncate table retail_agg;
truncate table retail_agg_temp;
truncate table retail_audit;
truncate table retail_atomic;


select * from retail_atomic limit 15;
select * from retail_audit limit 15;
select * from retail_agg_temp limit 10;
select * from retail_agg limit 10;
select * from stock_info limit 10;
select * from stock_temp limit 10;

select count(*) from retail_agg;
select count(*) from retail_agg_temp;
select count(*) from retail_atomic;
select count(*) from retail_audit;




